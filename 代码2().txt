package com.example.box;

import android.annotation.SuppressLint;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity2 extends AppCompatActivity{

    private ImageView playerImageView;
    private ImageView boxImageView;
    private ImageView wallImageView;
    private Button upButton;
    private Button downButton;
    private Button leftButton;
    private Button rightButton;

    private int playerPosX = 1;
    private int playerPosY = 1;

    private int boxPosX = 2;
    private int boxPosY = 8;
    private int wallPosX = 1;
    private int wallPosY = 2;

    int blackHolePosX = 6;
    int blackHolePosY = 6;

    @SuppressLint("MissingInflatedId")
    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        wallImageView = findViewById(R.id.wallImageView);
        wallImageView.setImageResource(R.drawable.qiangti);


        ImageView blackHoleImageView = findViewById(R.id.blackHoleImageView);
        blackHoleImageView.setImageResource(R.drawable.chengbao);

        playerImageView = findViewById(R.id.playerImageView);
        playerImageView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 切换人物图片
                playerImageView.setImageResource(R.drawable.kong);
            }
        });

        boxImageView = findViewById(R.id.boxImageView);
        boxImageView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 切换箱子图片
                boxImageView.setImageResource(R.drawable.box);
            }
        });

        upButton = findViewById(R.id.upButton);
        downButton = findViewById(R.id.downButton);
        leftButton = findViewById(R.id.leftButton);
        rightButton = findViewById(R.id.rightButton);



        upButton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                movePlayer(0, -1);
                return true;
            }
        });

        downButton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                movePlayer(0, 1);
                return true;
            }
        });

        leftButton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                movePlayer(-1, 0);
                return true;
            }
        });

        rightButton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                movePlayer(1, 0);
                return true;
            }

            void resetGame() {

            }
        });
    }




    private void movePlayer(int deltaX, int deltaY) {
        int nextPlayerPosX = playerPosX + deltaX;
        int nextPlayerPosY = playerPosY + deltaY;

        if (canMove(nextPlayerPosX, nextPlayerPosY)) {
            if (nextPlayerPosX == boxPosX && nextPlayerPosY == boxPosY) {
                int nextBoxPosX = boxPosX + deltaX;
                int nextBoxPosY = boxPosY + deltaY;

                if (canMove(nextBoxPosX, nextBoxPosY)) {
                    boxPosX = nextBoxPosX;
                    boxPosY = nextBoxPosY;
                } else {
                    return; // 如果箱子不能移动，不更新玩家位置
                }
            } else {
                boxPosX = playerPosX; // 更新箱子位置为玩家之前的位置
                boxPosY = playerPosY;
            }

            playerPosX = nextPlayerPosX;
            playerPosY = nextPlayerPosY;

            // 判断箱子是否移动到黑洞位置
            int nextBoxPosX = boxPosX + deltaX;
            int nextBoxPosY = boxPosY + deltaY;
            if (nextBoxPosX == blackHolePosX && nextBoxPosY == blackHolePosY) {
                gameWin();
            }

            updateGameView();
        }
    }
    private boolean canMove(int x, int y) {
        if (x < 0 || x >= 8 || y < 0 || y >= 8) {
            return false;
        }

        if (x == wallPosX && y == wallPosY) {
            return false;
        }
        if (x == boxPosX && y == boxPosY) {
            int nextBoxPosX = boxPosX + (x - playerPosX);
            int nextBoxPosY = boxPosY + (y - playerPosY);
            if (nextBoxPosX < 0 || nextBoxPosX >= 8 || nextBoxPosY < 0 || nextBoxPosY >= 8 ||
                    (nextBoxPosX == wallPosX && nextBoxPosY == wallPosY)) {
                return false;
            }
        }
        return true;
    }

    private void updateGameView() {
        playerImageView.setX(playerPosX * playerImageView.getWidth() );
        playerImageView.setY(playerPosY * playerImageView.getHeight() );

        boxImageView.setX(boxPosX * boxImageView.getWidth() );
        boxImageView.setY(boxPosY * boxImageView.getHeight());

        RelativeLayout.LayoutParams wallParams = (RelativeLayout.LayoutParams) wallImageView.getLayoutParams();
        wallParams.leftMargin = wallPosX * wallImageView.getWidth();
        wallParams.topMargin = wallPosY * wallImageView.getHeight();
        wallImageView.setLayoutParams(wallParams);

    }

    private boolean isGameOver = false;


    private void gameWin() {
        // 游戏胜利逻辑代码
        isGameOver = true;

        // 显示游戏结束的界面
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("游戏胜利");
        builder.setMessage("恭喜你完成了游戏！");
        builder.setPositiveButton("重新开始", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                // 重新开始游戏
                resetGame();
                dialog.dismiss();
            }
        });
        builder.setNegativeButton("退出", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                finish();
            }
        });
        builder.setCancelable(false);
        builder.show();
    }

    private void resetGame() {
        // 重置玩家、箱子和黑洞的位置
        playerPosX = 1;
        playerPosY = 1;

        boxPosX = 2;
        boxPosY = 2;
        wallPosX = 1;
        wallPosY = 2;

        blackHolePosX = 6;
        blackHolePosY = 6;
        // 如果黑洞位置需要重置，请在这里添加对应的代码

        // 重置游戏结束状态
        isGameOver = false;

        // 更新游戏界面
        updateGameView();
    }
}